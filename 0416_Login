from tkinter import *
from tkinter import messagebox
import sqlite3
import hashlib
import os


# === Database Setup ===
def init_db():
    conn = sqlite3.connect("medical_system.db")
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS Users (
        user_id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        role TEXT CHECK(role IN ('admin', 'product_owner', 'tester')) NOT NULL
    )''')

    # Add some sample users (hashed passwords)
    try:
        c.execute("INSERT INTO Users (username, password, role) VALUES (?, ?, ?)",
                  ("admin1", hash_password("admin123"), "admin"))
        c.execute("INSERT INTO Users (username, password, role) VALUES (?, ?, ?)",
                  ("owner1", hash_password("owner123"), "product_owner"))
        c.execute("INSERT INTO Users (username, password, role) VALUES (?, ?, ?)",
                  ("tester1", hash_password("tester123"), "tester"))
    except sqlite3.IntegrityError:
        pass  # Ignore if users already exist

    conn.commit()
    conn.close()


# === Hash Password ===
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


# === Login Function ===
def login():
    username = username_entry.get()
    password = password_entry.get()
    hashed_pw = hash_password(password)

    conn = sqlite3.connect("medical_system.db")
    c = conn.cursor()
    c.execute("SELECT role FROM Users WHERE username=? AND password=?", (username, hashed_pw))
    result = c.fetchone()
    conn.close()

    if result:
        role = result[0]
        messagebox.showinfo("Login Success", f"Welcome, {username}! Role: {role}")
        login_window.destroy()
        if role == "admin":
            admin_dashboard(username)
        elif role == "product_owner":
            product_owner_dashboard(username)
        elif role == "tester":
            tester_dashboard(username)
    else:
        messagebox.showerror("Login Failed", "Invalid username or password")


# === Role Dashboards ===
def admin_dashboard(username):
    win = Tk()
    win.title("Admin Dashboard")
    Label(win, text=f"Welcome Admin: {username}", font=("Arial", 16)).pack(pady=20)
    # Add admin features here...
    win.mainloop()


def product_owner_dashboard(username):
    win = Tk()
    win.title("Product Owner Page")
    Label(win, text=f"Welcome Product Owner: {username}", font=("Arial", 16)).pack(pady=20)
    # Add product owner features here...
    win.mainloop()


def tester_dashboard(username):
    win = Tk()
    win.title("Tester Page")
    Label(win, text=f"Welcome Tester: {username}", font=("Arial", 16)).pack(pady=20)
    # Add tester features here...
    win.mainloop()


# === Login UI ===
def start_login_window():
    global login_window, username_entry, password_entry
    login_window = Tk()
    login_window.title("Medical System Login")
    login_window.geometry("300x200")

    Label(login_window, text="Username").pack(pady=5)
    username_entry = Entry(login_window)
    username_entry.pack(pady=5)

    Label(login_window, text="Password").pack(pady=5)
    password_entry = Entry(login_window, show="*")
    password_entry.pack(pady=5)

    Button(login_window, text="Login", command=login).pack(pady=10)

    login_window.mainloop()


# === Run App ===
if __name__ == "__main__":
    init_db()
    start_login_window()
